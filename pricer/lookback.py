import numpy as np
import plotly.graph_objects as go
from pricer.monte_carlo import plotter_first_n_simulations, monte_carlo_simulations
from custom_templates import cyborg_template

def pricer_lookback(S, K, T, r):
    """
    Lookback option pricer using Monte Carlo simulations.
    
    Parameters:
        S (np.ndarray): Array of Monte Carlo simulation paths.
        K (float): Strike price.
        T (float): Time to maturity (in years).
        r (float): Risk-free interest rate.

    Returns:
        dict: Price of the Asian call, Price of the Asian put
    """

    discount_factor = np.exp(-r * T)  # Discount factor for risk-free rate

    # Calculate max price for each path
    max_price = np.max(S[:, 1:], axis=1)

    # Calculate max price for each path
    min_price = np.min(S[:, 1:], axis=1)

    # Calculate payoffs
    payoff_call = np.maximum(max_price - K, 0)
    payoff_put = np.maximum(K - min_price, 0)

    # Return discounted payoff
    price_call = discount_factor * np.mean(payoff_call)
    price_put = discount_factor * np.mean(payoff_put)

    return {'price_call': price_call, 
            'price_put': price_put}


def plotter_lookback(S: np.ndarray, n_sim_to_plot=10) -> go.Figure:
    """
    Plot Monte Carlo paths for lookback options.
    Displays:
    - The simulation paths.
    - A large dot at the maximum point of each path in the same color as the path.
    - A large "+" at the minimum point of each path in the same color as the path.

    Parameters:
        S (np.ndarray): Simulated price paths (matrix of shape [n_simulations, n_steps+1]).
        n_sim_to_plot (int): Number of simulations to plot.

    Note: it might seems weird that we do 3 for loops and add the line, max, min separately, 
        and not jsut one for loop in which we add the 3 at the same time. I do 3 distinct for loops to be able to give the same color (from the default autogenerated 
        plotly palette as I dont want to generate my own) to the line and dot and +.
    Returns:
        go.Figure: A Plotly figure object.
    """
    fig = go.Figure()

    # To track assigned colors for each line
    line_colors = []

    # Add traces for the first n_simulations
    for i in range(n_sim_to_plot):
        time_steps = np.arange(S.shape[1])

        # Line for the simulation path
        fig.add_trace(go.Scatter(
            x=time_steps,
            y=S[i, :],
            mode='lines',
            name=f'Simulation {i+1}',
            showlegend=True
        ))

        # Capture the color automatically assigned by Plotly
        line_color = fig.data[-1].line.color
        line_colors.append(line_color)  # Store the color for later use

    # Add max points for the first n_simulations
    for i in range(n_sim_to_plot):
        # Use the stored color for consistency
        color = line_colors[i]

        # Maximum point for the path
        max_idx = np.argmax(S[i, :])
        max_price = S[i, max_idx]
        fig.add_trace(go.Scatter(
            x=[max_idx],
            y=[max_price],
            mode='markers',
            marker=dict(size=12, color=color, symbol='circle'),
            name=f'Max Simulation {i+1}',
            showlegend=True  # Avoid cluttering the legend
        ))

    # Add min points for the first n_simulations
    for i in range(n_sim_to_plot):
        # Use the stored color for consistency
        color = line_colors[i]

        # Minimum point for the path
        min_idx = np.argmin(S[i, :])
        min_price = S[i, min_idx]
        fig.add_trace(go.Scatter(
            x=[min_idx],
            y=[min_price],
            mode='markers',
            marker=dict(size=12, color=color, symbol='cross'),
            name=f'Min Simulation {i+1}',
            showlegend=True  # Avoid cluttering the legend
        ))


    # Layout settings
    fig.update_layout(
        title=f"First {n_sim_to_plot} Monte Carlo Simulations with Max and Min Points",
        xaxis_title="Time Steps",
        yaxis_title="Stock Price",
        template=cyborg_template
    )

    return fig


if __name__ == '__main__':
    # Parameters
    S0 = 100
    K = 100
    T = 1
    r = 0.05
    sigma = 0.2
    n_simulations = 100000

    Z = np.random.standard_normal((n_simulations, 252))

    # Simulate Asian option payoffs
    S = monte_carlo_simulations(Z, S0, T, r, sigma, n_simulations)

    prices = pricer_lookback(S, K, T, r)

    fig_lookback = plotter_lookback(S, n_sim_to_plot=10)
    fig_lookback.show()


